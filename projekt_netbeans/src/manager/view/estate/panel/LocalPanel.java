/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package manager.view.estate.panel;

import java.awt.event.ItemEvent;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JComboBox;
import manager.controller.EstateController;

/**
 * Zarzadza panele filtrownia zawartoscia ze wzgledu na lokalizacje
 * @author Damian Rakowski
 * 
 */
public class LocalPanel extends javax.swing.JPanel implements Observer {

    private final EstateController controller;

    /**
     * Tworzy nowy LocalPanel ustawia controller
     */
    public LocalPanel(){
        controller=null;
        initComponents();
    }
    
    /**
     * Tworzy nowy LocalPanel i ustawia konstuktor oraz ustawia komponenty
     * @param controller
     */
    public LocalPanel(EstateController controller) {
        this.controller = controller;
        initComponents();
        fillAllCountry();
        fillAllCounty();
        fillAllProvince();
        fillAllStreet();
        setupListener();
    }

     /**
     * Ustawia nasluch zdarzen na komponenty i fitruje wyniki
     */
    private void setupListener() {
        jcbContry.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                String name1 = ((JComboBox) e.getSource()).getSelectedItem().toString();
                if (!name1.equals(" ")) {
                    controller.getTablePanel().fillterByCountry(name1);
                } else {
                    controller.getTablePanel().getSorter().setRowFilter(null);
                }
            }
        });

        jcbCounty.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                String name1 = ((JComboBox) e.getSource()).getSelectedItem().toString();
                if (!name1.equals(" ")) {
                    controller.getTablePanel().fillterByCounty(name1);
                } else {
                    controller.getTablePanel().getSorter().setRowFilter(null);
                }
            }
        });
        
        jcbProvince.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                String name1 = ((JComboBox) e.getSource()).getSelectedItem().toString();
                if (!name1.equals(" ")) {
                    controller.getTablePanel().fillterByProvince(name1);
                } else {
                    controller.getTablePanel().getSorter().setRowFilter(null);
                }
            }
        });

        jcbStreet.addItemListener((ItemEvent e) -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                String name1 = ((JComboBox) e.getSource()).getSelectedItem().toString();
                if (!name1.equals(" ")) {
                    controller.getTablePanel().fillterByStreet(name1);
                } else {
                    controller.getTablePanel().getSorter().setRowFilter(null);
                }
            }
        });

    }

     /**
     * Wypelnia liste miast
     */
    private void fillAllCountry() {
        jcbContry.addItem(" ");
        controller.getAllCountries().forEach((countries) -> {
            jcbContry.addItem(countries);
        });

    }
    
     /**
     * Wypelnia liste powiatow
     */
    private void fillAllCounty() {
        jcbCounty.addItem(" ");
        controller.getAllCounties().forEach((counties) -> {
            jcbCounty.addItem(counties);
        });

    }
     /**
     * Wypelnia liste wojewodztw
     */
    private void fillAllProvince() {
        jcbProvince.addItem(" ");
        controller.getAllProvinces().forEach((provinces) -> {
            jcbProvince.addItem(provinces);
        });

    }
     /**
     * Wypelnia liste ulic
     */
    private void fillAllStreet() {
        jcbStreet.addItem(" ");
        controller.getAllStreets().forEach((streets) -> {
            jcbStreet.addItem(streets);
        });

    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jlabCountry = new javax.swing.JLabel();
        jcbContry = new javax.swing.JComboBox<>();
        jlabLocalization = new javax.swing.JLabel();
        jspinLocalization = new javax.swing.JSeparator();
        jlabProvince = new javax.swing.JLabel();
        jcbProvince = new javax.swing.JComboBox<>();
        jlabCounty = new javax.swing.JLabel();
        jcbCounty = new javax.swing.JComboBox<>();
        jlabStreet = new javax.swing.JLabel();
        jcbStreet = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 204, 204)));
        setAutoscrolls(true);

        jlabCountry.setText("Kraj:");

        jlabLocalization.setText("Lokalizacja:");

        jlabProvince.setText("Wojewodztwo:");

        jlabCounty.setText("Powiat:");

        jlabStreet.setText("Ulica:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspinLocalization)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jlabLocalization, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcbContry, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcbProvince, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcbCounty, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jlabCountry)
                            .addComponent(jlabProvince)
                            .addComponent(jlabCounty)
                            .addComponent(jlabStreet))
                        .addGap(0, 78, Short.MAX_VALUE))
                    .addComponent(jcbStreet, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jlabLocalization)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jspinLocalization, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlabCountry)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbContry, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlabProvince, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbProvince, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlabCounty)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jcbCounty, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jlabStreet)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcbStreet, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 34, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jcbContry;
    private javax.swing.JComboBox<String> jcbCounty;
    private javax.swing.JComboBox<String> jcbProvince;
    private javax.swing.JComboBox<String> jcbStreet;
    private javax.swing.JLabel jlabCountry;
    private javax.swing.JLabel jlabCounty;
    private javax.swing.JLabel jlabLocalization;
    private javax.swing.JLabel jlabProvince;
    private javax.swing.JLabel jlabStreet;
    private javax.swing.JSeparator jspinLocalization;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        jcbContry.removeAllItems();
        jcbCounty.removeAllItems();
        jcbProvince.removeAllItems();
        jcbStreet.removeAllItems();
        
        fillAllCountry();
        fillAllCounty();
        fillAllProvince();
        fillAllStreet();
        

    }
}
